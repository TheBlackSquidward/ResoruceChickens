buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://sizableshrimp.me/maven' }
        maven { url= 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.8-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

repositories {
    maven { url "https://www.dogforce-games.com/maven/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.k-4u.nl" }
    maven { url 'https://modmaven.dev/' }
}

version = '1.0'
group = 'io.github.TheBlackSquidward.resourcechickens'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "official", version: "${mapping}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'fml.earlyprogresswindow','false'

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow','false'

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'resourcechickens', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                resourcechickens {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}")

    compileOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "resourcechickens",
                "Specification-Vendor": "resourcechickens",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"resourcechickens",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}